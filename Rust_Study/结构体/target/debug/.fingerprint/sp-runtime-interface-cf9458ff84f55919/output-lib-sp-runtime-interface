{"message":"cannot transmute between types of different sizes, or dependently-sized types","code":{"code":"E0512","explanation":"Transmute with two differently sized types was attempted.\n\nErroneous code example:\n\n```compile_fail,E0512\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n    // error: cannot transmute between types of different sizes,\n    //        or dependently-sized types\n}\n```\n\nPlease use types with same size or use the expected type directly. Example:\n\n```\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n    // or:\n    unsafe { takes_u8(0u8); } // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/assert_eq_size.rs","byte_start":1285,"byte_end":1325,"line_start":37,"line_end":37,"column_start":23,"column_end":63,"is_primary":true,"text":[{"text":"            $(let _ = $crate::_core::mem::transmute::<$x, $xs>;)+","highlight_start":23,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/lzw/.cargo/git/checkouts/substrate-5de9f0257302cd42/83808aa/primitives/runtime-interface/src/impls.rs","byte_start":1471,"byte_end":1499,"line_start":44,"line_end":44,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"assert_eq_size!(usize, u32);","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq_size!","def_site_span":{"file_name":"/Users/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/assert_eq_size.rs","byte_start":1168,"byte_end":1348,"line_start":34,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq_size {","highlight_start":1,"highlight_end":1},{"text":"    ($x:ty, $($xs:ty),+ $(,)?) => {","highlight_start":1,"highlight_end":1},{"text":"        const _: fn() = || {","highlight_start":1,"highlight_end":1},{"text":"            $(let _ = $crate::_core::mem::transmute::<$x, $xs>;)+","highlight_start":1,"highlight_end":1},{"text":"        };","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"source type: `usize` (64 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"target type: `u32` (32 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0512]\u001b[0m\u001b[0m\u001b[1m: cannot transmute between types of different sizes, or dependently-sized types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/lzw/.cargo/git/checkouts/substrate-5de9f0257302cd42/83808aa/primitives/runtime-interface/src/impls.rs:44:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0massert_eq_size!(usize, u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: source type: `usize` (64 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: target type: `u32` (32 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq_size` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot transmute between types of different sizes, or dependently-sized types","code":{"code":"E0512","explanation":"Transmute with two differently sized types was attempted.\n\nErroneous code example:\n\n```compile_fail,E0512\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n    // error: cannot transmute between types of different sizes,\n    //        or dependently-sized types\n}\n```\n\nPlease use types with same size or use the expected type directly. Example:\n\n```\nfn takes_u8(_: u8) {}\n\nfn main() {\n    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n    // or:\n    unsafe { takes_u8(0u8); } // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/assert_eq_size.rs","byte_start":1285,"byte_end":1325,"line_start":37,"line_end":37,"column_start":23,"column_end":63,"is_primary":true,"text":[{"text":"            $(let _ = $crate::_core::mem::transmute::<$x, $xs>;)+","highlight_start":23,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/lzw/.cargo/git/checkouts/substrate-5de9f0257302cd42/83808aa/primitives/runtime-interface/src/impls.rs","byte_start":1585,"byte_end":1617,"line_start":46,"line_end":46,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"assert_eq_size!(*const u8, u32);","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq_size!","def_site_span":{"file_name":"/Users/lzw/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/assert_eq_size.rs","byte_start":1168,"byte_end":1348,"line_start":34,"line_end":40,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq_size {","highlight_start":1,"highlight_end":30},{"text":"    ($x:ty, $($xs:ty),+ $(,)?) => {","highlight_start":1,"highlight_end":36},{"text":"        const _: fn() = || {","highlight_start":1,"highlight_end":29},{"text":"            $(let _ = $crate::_core::mem::transmute::<$x, $xs>;)+","highlight_start":1,"highlight_end":66},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"source type: `*const u8` (64 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"target type: `u32` (32 bits)","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0512]\u001b[0m\u001b[0m\u001b[1m: cannot transmute between types of different sizes, or dependently-sized types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/lzw/.cargo/git/checkouts/substrate-5de9f0257302cd42/83808aa/primitives/runtime-interface/src/impls.rs:46:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0massert_eq_size!(*const u8, u32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: source type: `*const u8` (64 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: target type: `u32` (32 bits)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `assert_eq_size` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0512`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0512`.\u001b[0m\n"}
